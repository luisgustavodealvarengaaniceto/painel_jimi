# Multi-stage build para otimiza√ß√£o
FROM node:20 AS base

# Instalar depend√™ncias necess√°rias
RUN apt-get update && apt-get install -y \
    curl \
    bash \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/* \
    && npm config set registry https://registry.npmjs.org/ \
    && npm config set fetch-retries 5 \
    && npm config set fetch-retry-factor 2 \
    && npm config set fetch-retry-mintimeout 10000 \
    && npm config set fetch-retry-maxtimeout 60000

WORKDIR /app

# Copiar package.json files
COPY package*.json ./
COPY backend/package*.json ./backend/

# Stage 1: Build Frontend
FROM base AS frontend-build

# Instalar depend√™ncias do frontend
RUN npm install

# Copiar c√≥digo do frontend
COPY . .

# Build do frontend
RUN npm run build

# Stage 2: Build Backend
FROM base AS backend-build

WORKDIR /app/backend

# Instalar depend√™ncias do backend
RUN npm install

# Copiar c√≥digo do backend
COPY backend/ .

# Build do backend
RUN npm run build

# Stage 3: Production
FROM node:18 AS production

# Instalar depend√™ncias de sistema
RUN apt-get update && apt-get install -y \
    curl \
    bash \
    postgresql-client \
    dumb-init \
    && rm -rf /var/lib/apt/lists/*

# Criar usu√°rio n√£o-root
RUN groupadd -g 1001 nodejs && \
    useradd -r -u 1001 -g nodejs nextjs

WORKDIR /app

# Copiar depend√™ncias do backend
COPY backend/package*.json ./backend/
WORKDIR /app/backend

# Instalar depend√™ncias incluindo Prisma
RUN npm ci --only=production && npm cache clean --force

# Gerar Prisma Client durante o build
COPY --from=backend-build /app/backend/prisma ./prisma
RUN npx prisma generate

# Copiar backend buildado
COPY --from=backend-build --chown=nextjs:nodejs /app/backend/dist ./dist

# Copiar frontend buildado para o diret√≥rio compartilhado
COPY --from=frontend-build --chown=nextjs:nodejs /app/dist ./frontend

# Criar script de inicializa√ß√£o diretamente no container (evita problemas de CRLF)
RUN echo '#!/bin/bash' > /entrypoint.sh && \
    echo 'set -e' >> /entrypoint.sh && \
    echo 'echo "üöÄ JIMI IOT BRASIL - Iniciando aplica√ß√£o..."' >> /entrypoint.sh && \
    echo 'echo "üîç DEBUG: Verificando vari√°veis de ambiente..."' >> /entrypoint.sh && \
    echo 'echo "NODE_ENV: $NODE_ENV"' >> /entrypoint.sh && \
    echo 'echo "DATABASE_URL: ${DATABASE_URL:0:50}..." ' >> /entrypoint.sh && \
    echo 'echo "POSTGRES_USER: $POSTGRES_USER"' >> /entrypoint.sh && \
    echo 'echo "POSTGRES_DB: $POSTGRES_DB"' >> /entrypoint.sh && \
    echo 'if [ -z "$DATABASE_URL" ]; then' >> /entrypoint.sh && \
    echo '    echo "‚ùå ERROR: DATABASE_URL n√£o definida!"' >> /entrypoint.sh && \
    echo '    echo "Definindo DATABASE_URL manualmente..."' >> /entrypoint.sh && \
    echo '    export DATABASE_URL="postgresql://${POSTGRES_USER:-painel_user}:${POSTGRES_PASSWORD:-JimiIOT2024!@#}@postgres:5432/${POSTGRES_DB:-painel_jimi}"' >> /entrypoint.sh && \
    echo '    echo "Nova DATABASE_URL: ${DATABASE_URL:0:50}..."' >> /entrypoint.sh && \
    echo 'fi' >> /entrypoint.sh && \
    echo 'echo "‚è≥ Aguardando PostgreSQL..."' >> /entrypoint.sh && \
    echo 'for i in {1..30}; do' >> /entrypoint.sh && \
    echo '    if pg_isready -h postgres -p 5432 -U "${POSTGRES_USER:-painel_user}"; then' >> /entrypoint.sh && \
    echo '        echo "‚úÖ PostgreSQL est√° pronto!"' >> /entrypoint.sh && \
    echo '        break' >> /entrypoint.sh && \
    echo '    fi' >> /entrypoint.sh && \
    echo '    echo "Tentativa $i/30: PostgreSQL ainda n√£o est√° pronto, aguardando..."' >> /entrypoint.sh && \
    echo '    sleep 2' >> /entrypoint.sh && \
    echo 'done' >> /entrypoint.sh && \
    echo 'echo "üìä Executando migra√ß√µes..."' >> /entrypoint.sh && \
    echo 'npx prisma db push --accept-data-loss --schema=./prisma/schema.prisma || echo "‚ö†Ô∏è Migra√ß√£o falhou, continuando..."' >> /entrypoint.sh && \
    echo 'echo "üå± Executando seed..."' >> /entrypoint.sh && \
    echo 'npx prisma db seed || echo "‚ö†Ô∏è Seed falhou, continuando..."' >> /entrypoint.sh && \
    echo 'echo "ÔøΩ Criando arquivo HTML b√°sico..."' >> /entrypoint.sh && \
    echo 'mkdir -p /app/frontend' >> /entrypoint.sh && \
    echo 'cat > /app/frontend/index.html << EOF' >> /entrypoint.sh && \
    echo '<!DOCTYPE html>' >> /entrypoint.sh && \
    echo '<html lang="pt-BR">' >> /entrypoint.sh && \
    echo '<head>' >> /entrypoint.sh && \
    echo '    <meta charset="UTF-8">' >> /entrypoint.sh && \
    echo '    <meta name="viewport" content="width=device-width, initial-scale=1.0">' >> /entrypoint.sh && \
    echo '    <title>JIMI IOT Brasil Dashboard</title>' >> /entrypoint.sh && \
    echo '    <style>' >> /entrypoint.sh && \
    echo '        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }' >> /entrypoint.sh && \
    echo '        .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }' >> /entrypoint.sh && \
    echo '        .header { text-align: center; color: #09A0E9; margin-bottom: 30px; }' >> /entrypoint.sh && \
    echo '        .status { padding: 15px; background: #e8f5e8; border-left: 4px solid #4caf50; margin: 20px 0; }' >> /entrypoint.sh && \
    echo '    </style>' >> /entrypoint.sh && \
    echo '</head>' >> /entrypoint.sh && \
    echo '<body>' >> /entrypoint.sh && \
    echo '    <div class="container">' >> /entrypoint.sh && \
    echo '        <div class="header">' >> /entrypoint.sh && \
    echo '            <h1>üéâ JIMI IOT Brasil Dashboard</h1>' >> /entrypoint.sh && \
    echo '            <h2>Sistema Online e Funcionando!</h2>' >> /entrypoint.sh && \
    echo '        </div>' >> /entrypoint.sh && \
    echo '        <div class="status">' >> /entrypoint.sh && \
    echo '            <strong>‚úÖ Status do Sistema:</strong><br>' >> /entrypoint.sh && \
    echo '            ‚Ä¢ API Backend: Funcionando<br>' >> /entrypoint.sh && \
    echo '            ‚Ä¢ Frontend: Funcionando<br>' >> /entrypoint.sh && \
    echo '            ‚Ä¢ Database: PostgreSQL conectado<br>' >> /entrypoint.sh && \
    echo '        </div>' >> /entrypoint.sh && \
    echo '        <div class="status">' >> /entrypoint.sh && \
    echo '            <strong>üåê URLs de Acesso:</strong><br>' >> /entrypoint.sh && \
    echo '            ‚Ä¢ <a href="/api/health" target="_blank">API Health Check</a><br>' >> /entrypoint.sh && \
    echo '        </div>' >> /entrypoint.sh && \
    echo '    </div>' >> /entrypoint.sh && \
    echo '</body>' >> /entrypoint.sh && \
    echo '</html>' >> /entrypoint.sh && \
    echo 'EOF' >> /entrypoint.sh && \
    echo 'echo "ÔøΩüéâ Aplica√ß√£o iniciada com sucesso!"' >> /entrypoint.sh && \
    echo 'exec node dist/app.js' >> /entrypoint.sh && \
    chmod +x /entrypoint.sh

# Criar pasta para uploads
RUN mkdir -p /app/uploads && chown nextjs:nodejs /app/uploads

# Dar permiss√µes completas para o diret√≥rio do projeto
RUN chown -R nextjs:nodejs /app && \
    chmod -R 755 /app && \
    chown nextjs:nodejs /entrypoint.sh

# Mudar para usu√°rio n√£o-root
USER nextjs

# Expor porta
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3001/api/health || exit 1

# Script de inicializa√ß√£o
CMD ["/bin/bash", "/entrypoint.sh"]
