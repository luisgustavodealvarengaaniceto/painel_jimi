version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: jimi-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: painel_jimi
      POSTGRES_USER: painel_user
      POSTGRES_PASSWORD: JimiIOT2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - jimi-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U painel_user -d painel_jimi"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Application (Frontend + Backend) - Versão Simplificada
  app:
    build:
      context: .
      dockerfile: Dockerfile.simple
    container_name: jimi-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://painel_user:JimiIOT2024@postgres:5432/painel_jimi
      - POSTGRES_USER=painel_user
      - POSTGRES_PASSWORD=JimiIOT2024
      - POSTGRES_DB=painel_jimi
      - JWT_SECRET=jimi-iot-brasil-super-secure-secret-key-2024
      - PORT=3001
    volumes:
      - app_uploads:/app/uploads
      - frontend_files:/app/frontend
    networks:
      - jimi-network
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3001:3001"  # Exposição direta para debug

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: jimi-nginx
    restart: unless-stopped
    ports:
      - "1212:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - frontend_files:/app/frontend
    networks:
      - jimi-network
    depends_on:
      - app

# Networks
networks:
  jimi-network:
    driver: bridge

# Volumes
volumes:
  postgres_data:
  app_uploads:
  frontend_files: