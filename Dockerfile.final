# Dockerfile Final - Vers√£o Robusta para Produ√ß√£o
FROM node:20-slim

# Instalar depend√™ncias de sistema necess√°rias
RUN apt-get update && apt-get install -y \
    curl \
    bash \
    postgresql-client \
    openssl \
    ca-certificates \
    libc6 \
    libssl3 \
    && rm -rf /var/lib/apt/lists/*

# Criar usu√°rio para seguran√ßa
RUN groupadd -g 1001 nodejs && \
    useradd -r -u 1001 -g nodejs app

WORKDIR /app

# Copiar package.json primeiro para cache das depend√™ncias
COPY package*.json ./
COPY backend/package*.json ./backend/

# Instalar depend√™ncias do frontend
RUN npm ci --only=production && npm cache clean --force

# Instalar depend√™ncias do backend
WORKDIR /app/backend
RUN npm ci --only=production && npm cache clean --force

# Voltar para raiz
WORKDIR /app

# Copiar c√≥digo fonte
COPY . .

# Build do frontend
RUN npm run build

# Build do backend
WORKDIR /app/backend
RUN npm run build

# Criar diret√≥rios necess√°rios
RUN mkdir -p /app/uploads /app/frontend /app/logs

# Copiar frontend buildado
RUN cp -r /app/dist/* /app/frontend/ 2>/dev/null || true

# Criar script de inicializa√ß√£o robusto
RUN echo '#!/bin/bash\n\
set -e\n\
echo "üöÄ JIMI IOT BRASIL - Iniciando aplica√ß√£o robusta..."\n\
\n\
# Configurar vari√°veis de ambiente para Prisma\n\
export PRISMA_CLI_BINARY_TARGETS="native"\n\
export PRISMA_ENGINES_MIRROR="https://github.com/prisma/prisma-engines/releases"\n\
export OPENSSL_CONF=""\n\
\n\
# Aguardar PostgreSQL com timeout\n\
echo "‚è≥ Aguardando PostgreSQL..."\n\
timeout=60\n\
counter=0\n\
while [ $counter -lt $timeout ]; do\n\
    if pg_isready -h postgres -p 5432 -U painel_user -d painel_jimi; then\n\
        echo "‚úÖ PostgreSQL est√° pronto!"\n\
        break\n\
    fi\n\
    counter=$((counter + 2))\n\
    echo "Aguardando... ($counter/$timeout)s"\n\
    sleep 2\n\
done\n\
\n\
if [ $counter -ge $timeout ]; then\n\
    echo "‚ùå Timeout aguardando PostgreSQL!"\n\
    exit 1\n\
fi\n\
\n\
# Ir para diret√≥rio do backend\n\
cd /app/backend\n\
\n\
# Instalar Prisma Client se necess√°rio\n\
echo "üîß Verificando Prisma Client..."\n\
if [ ! -d "node_modules/@prisma/client" ]; then\n\
    echo "üì¶ Instalando @prisma/client..."\n\
    npm install @prisma/client\n\
fi\n\
\n\
# Gerar Prisma Client\n\
echo "‚öôÔ∏è Gerando Prisma Client..."\n\
npx prisma generate --schema=./prisma/schema.prisma\n\
\n\
# Executar migra√ß√µes\n\
echo "üìä Aplicando migra√ß√µes do banco..."\n\
npx prisma db push --accept-data-loss --schema=./prisma/schema.prisma\n\
\n\
# Verificar se consegue conectar no banco\n\
echo "üîç Testando conex√£o com banco..."\n\
node -e "\n\
const { PrismaClient } = require('\''@prisma/client'\'');\n\
const prisma = new PrismaClient();\n\
prisma.\\$connect()\n\
  .then(() => {\n\
    console.log('\''‚úÖ Conex√£o com banco OK!'\'');\n\
    return prisma.\\$disconnect();\n\
  })\n\
  .catch(err => {\n\
    console.error('\''‚ùå Erro na conex√£o:'\'', err.message);\n\
    process.exit(1);\n\
  });\n\
"\n\
\n\
# Configurar frontend no volume compartilhado\n\
echo "üìÅ Configurando frontend..."\n\
if [ ! -f "/app/frontend/index.html" ]; then\n\
    echo "üîÑ Copiando arquivos do frontend..."\n\
    cp -r /app/dist/* /app/frontend/ 2>/dev/null || echo "‚ö†Ô∏è Falha na c√≥pia"\n\
fi\n\
\n\
if [ -f "/app/frontend/index.html" ]; then\n\
    echo "‚úÖ Frontend configurado!"\n\
else\n\
    echo "‚ùå Frontend n√£o encontrado!"\n\
fi\n\
\n\
echo "üéâ Iniciando servidor Node.js..."\n\
exec node dist/app.js' > /app/start.sh

# Dar permiss√µes ao script
RUN chmod +x /app/start.sh

# Ajustar permiss√µes
RUN chown -R app:nodejs /app

# Mudar para usu√°rio n√£o-root
USER app

# Expor porta
EXPOSE 3001

# Health check robusto
HEALTHCHECK --interval=30s --timeout=15s --start-period=90s --retries=3 \
    CMD curl -f http://localhost:3001/api/health || exit 1

# Comando de inicializa√ß√£o
CMD ["/app/start.sh"]