version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: jimi-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: painel_jimi
      POSTGRES_USER: painel_user
      POSTGRES_PASSWORD: JimiIOT2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - jimi-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U painel_user -d painel_jimi"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Application (Frontend + Backend)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: jimi-app
    restart: unless-stopped
    env_file:
      - .env.docker
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://painel_user:JimiIOT2024@postgres:5432/painel_jimi
      - POSTGRES_USER=painel_user
      - POSTGRES_PASSWORD=JimiIOT2024
      - POSTGRES_DB=painel_jimi
    volumes:
      - app_uploads:/app/uploads
      - frontend_files:/app/frontend
    networks:
      - jimi-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: jimi-nginx
    restart: unless-stopped
    ports:
      - "1212:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - frontend_files:/app/frontend
    networks:
      - jimi-network
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Networks
networks:
  jimi-network:
    driver: bridge
    name: jimi-iot-network

# Volumes
volumes:
  postgres_data:
    name: jimi-postgres-data
  app_uploads:
    name: jimi-app-uploads
  frontend_files:
    name: jimi-frontend-files
